// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package MyRobot;

import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.cscore.VideoMode;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.vision.VisionPipeline;
import edu.wpi.first.wpilibj.vision.VisionRunner;
import edu.wpi.first.wpilibj.vision.VisionThread;

import java.io.IOException;
import java.util.ArrayList;

import org.opencv.core.Mat;
import org.opencv.core.Rect;
import org.opencv.imgproc.Imgproc;

import MyRobot.commands.*;
import MyRobot.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    
    public static Drive drive;
    public static GripPipeline pipeline;
    public static NetworkTable grip;
    public static OI oi;
    public static DriverStation driverStation;
    public static Camera camera;
    
    private static final int IMG_WIDTH = 320;
	private static final int IMG_HEIGHT = 240;
	public VisionRunner runner;
	private VisionThread visionThread;
	public static double centerX = 0.0;
	
	public static final Object imgLock = new Object();
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	RobotMap.init();
    	UsbCamera camera = CameraServer.getInstance().startAutomaticCapture();
        camera.setResolution(IMG_WIDTH, IMG_HEIGHT);
        
        
//    	VisionRunner.Listener pipelineThread = new VisionRunner.Listener<GripPipeline>() {
//			@Override
//			public void copyPipelineOutputs(GripPipeline pipeline) {
//				synchronized (imgLock) {
//					lines = Robot.pipeline.findLinesOutput();
//				}
//			}
//    	};
    	grip = NetworkTable.getTable("GRIP/lines");
    	//runner = new VisionRunner(camera, new GripPipeline(), pipelineThread);
    	visionThread = new VisionThread(camera, new GripPipeline(), pipeline -> {
    		if (!pipeline.findContoursOutput().isEmpty()) {
    			Rect r = Imgproc.boundingRect(pipeline.findContoursOutput ().get(0));
    			synchronized (imgLock) {
    				centerX = r.x + (r.width / 2);
    			}
    			DriverStation.reportError("x: " + Robot.centerX, false);
    		} else {
    			synchronized (imgLock) {
    				//centerX = 0;
    			}
    		}
    	});
    	visionThread.start();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drive = new Drive();
        //pipeline = new GripPipeline();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        
        
        /*
        driverStation = DriverStation.getInstance();
        */
        
        
        //camera = CameraServer.getInstance().startAutomaticCapture();
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonomousCommand();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
        
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        //StickDrive driver = new StickDrive();
        
        Follow follow = new Follow();
		Scheduler.getInstance().add(follow);
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
